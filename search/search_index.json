{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Veil Documentation The python package for automatic experiments logging.","title":"Welcome to the Veil Documentation"},{"location":"#welcome-to-the-veil-documentation","text":"The python package for automatic experiments logging.","title":"Welcome to the Veil Documentation"},{"location":"api/","text":"API Reference Types StringDict = Dict [ str , str ] module-attribute Type alias for generic lists of strings. Decorators AutologSession Wraps an autolog session. Parameters: autologger ( Autologger ) \u2013 the autolog object name ( Optional[str] , default: None ) \u2013 the experiment name, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Source code in veil/decorators.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 class AutologSession : \"\"\" Wraps an autolog session. Parameters ---------- autologger : Autologger the autolog object name : Optional[str], optional the experiment name, by default None log_tags : StringDict, optional the tags to be logged, by default dict() \"\"\" def __init__ ( self , autologger : Autologger , name : Optional [ str ] = None , log_tags : StringDict = dict (), ): self . name = name self . log_tags = log_tags # members with intended private access self . __autologger : Autologger = check_type ( autologger , Autologger ) self . __run_id : Optional [ str ] = None self . __past_session : Optional [ AutologSession ] = None @property def autologger ( self ) -> Autologger : return self . __autologger @property def run_id ( self ) -> Optional [ str ]: return self . __run_id @property def name ( self ) -> Optional [ str ]: return self . __name @name . setter def name ( self , value : Optional [ str ]) -> None : self . __name : Optional [ str ] = check_type ( value , Optional [ str ]) @property def log_tags ( self ) -> StringDict : return self . __log_tags @log_tags . setter def log_tags ( self , value : StringDict ) -> None : self . __log_tags : StringDict = check_type ( value , StringDict ) def __enter__ ( self ): # switch the session currently used by the autologger to this one self . __past_session = self . autologger . _current_session self . autologger . _current_session = self @MlflowIsolated ( autologger = self . autologger ) def do_enter (): # starting a session means managing the context so to: if self . autologger . is_autolog_enabled : # immediately starts and stops a novel parent run associated with this context # note that this run will be resumed within run-annotated functions. run : ActiveRun = mlflow . start_run ( run_name = self . name ) mlflow . end_run ( status = RunStatus . to_string ( RunStatus . RUNNING )) self . __run_id = run . info . run_id do_enter () def __exit__ ( self , exc_type , exc_value , exc_tb ): @MlflowIsolated ( autologger = self . autologger ) def do_exit (): # terminating a session means managing the context so to: if self . autologger . is_autolog_enabled : # immediately starts and stops the parent run associated with this context # note that it is terminated with a given status, according to exceptions within the # context manager. termination_status : RunStatus = RunStatus . FINISHED if exc_type : termination_status = RunStatus . FAILED mlflow . start_run ( run_id = self . autologger . _current_session . run_id ) mlflow . end_run ( status = RunStatus . to_string ( termination_status )) self . __run_id = None do_exit () # switch back the session currently used by the autologger to the previous one self . autologger . _current_session = self . __past_session self . __past_session = None Autologger Implements the auto-logging strategy. Source code in veil/decorators.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 class Autologger : \"\"\" Implements the auto-logging strategy. \"\"\" def __init__ ( self , is_autolog_enabled : bool = True , tracking_uri : str = mlflow . get_tracking_uri (), experiment_name : str = Experiment . DEFAULT_EXPERIMENT_NAME , ): self . is_autolog_enabled = is_autolog_enabled self . tracking_uri = tracking_uri self . experiment_name = experiment_name # members with intended protected access self . _current_session : Optional [ AutologSession ] = None @property def is_autolog_enabled ( self ) -> bool : return self . __is_autolog_enabled @is_autolog_enabled . setter def is_autolog_enabled ( self , value : bool ) -> None : self . __is_autolog_enabled : bool = check_type ( value , bool ) @property def tracking_uri ( self ) -> str : return self . __tracking_uri @tracking_uri . setter def tracking_uri ( self , value : str ) -> None : self . __tracking_uri : str = check_type ( value , str ) @property def experiment_name ( self ) -> str : return self . __experiment_name @experiment_name . setter def experiment_name ( self , value : str ) -> None : self . __experiment_name : str = check_type ( value , str ) def start_session ( self , name : Optional [ str ] = None , log_tags : StringDict = dict () ): \"\"\"Starts a new session. Parameters ---------- name : Optional[str], optional the experiment name, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- AutologSession teh autolog session. \"\"\" return AutologSession ( autologger = self , name = name , log_tags = log_tags ) def run ( self , name : Optional [ str ] = None , log_params : Optional [ StringList ] = None , log_tags : StringDict = dict () ): \"\"\"Executes a new run. Parameters ---------- name : Optional[str], optional the run name, by default None log_params : Optional[StringList], optional the params to be logged, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- Run the experiment run. \"\"\" return Run ( autologger = self , name = name , log_params = log_params , log_tags = log_tags ) run ( name = None , log_params = None , log_tags = dict ()) Executes a new run. Parameters: name ( Optional[str] , default: None ) \u2013 the run name, by default None log_params ( Optional[StringList] , default: None ) \u2013 the params to be logged, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Returns: Run \u2013 the experiment run. Source code in veil/decorators.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def run ( self , name : Optional [ str ] = None , log_params : Optional [ StringList ] = None , log_tags : StringDict = dict () ): \"\"\"Executes a new run. Parameters ---------- name : Optional[str], optional the run name, by default None log_params : Optional[StringList], optional the params to be logged, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- Run the experiment run. \"\"\" return Run ( autologger = self , name = name , log_params = log_params , log_tags = log_tags ) start_session ( name = None , log_tags = dict ()) Starts a new session. Parameters: name ( Optional[str] , default: None ) \u2013 the experiment name, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Returns: AutologSession \u2013 teh autolog session. Source code in veil/decorators.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def start_session ( self , name : Optional [ str ] = None , log_tags : StringDict = dict () ): \"\"\"Starts a new session. Parameters ---------- name : Optional[str], optional the experiment name, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- AutologSession teh autolog session. \"\"\" return AutologSession ( autologger = self , name = name , log_tags = log_tags ) MlflowIsolated Isolates an Mlflow experiment. Source code in veil/decorators.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 class MlflowIsolated : \"\"\" Isolates an Mlflow experiment. \"\"\" def __init__ ( self , autologger : Autologger ): # members with intended private access self . __autologger : Autologger = check_type ( autologger , Autologger ) def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) def isolation_wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session is not None : # 3) switch the run current active run (which is paused) within mlflow with a new one past_active_run : ActiveRun = mlflow . active_run () if past_active_run : mlflow . end_run ( RunStatus . to_string ( RunStatus . RUNNING )) # 1) switch the tracking uri currently used by mlflow to the one in the autologger past_tracking_uri : str = mlflow . get_tracking_uri () mlflow . set_tracking_uri ( self . __autologger . tracking_uri ) # 2) switch the experiment currently used by mlflow to the one in the autologger past_active_experiment_id : str = _active_experiment_id () mlflow . set_experiment ( experiment_name = self . __autologger . experiment_name ) # performs the function workload result = func ( * args , ** kwargs ) # 5) switch back to the previosuly activated experiment mlflow . set_experiment ( experiment_id = past_active_experiment_id ) past_active_experiment_id = None # 6) switch back to the previously targeted tracking server mlflow . set_tracking_uri ( past_tracking_uri ) past_tracking_uri = None # 4) switch back to the previously activated run if past_active_run : mlflow . start_run ( run_id = past_active_run . info . run_id ) past_active_run = None else : result = func ( * args , ** kwargs ) return result return isolation_wrapper __call__ ( func ) Execute the decorator as well as the wrapped function Source code in veil/decorators.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) def isolation_wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session is not None : # 3) switch the run current active run (which is paused) within mlflow with a new one past_active_run : ActiveRun = mlflow . active_run () if past_active_run : mlflow . end_run ( RunStatus . to_string ( RunStatus . RUNNING )) # 1) switch the tracking uri currently used by mlflow to the one in the autologger past_tracking_uri : str = mlflow . get_tracking_uri () mlflow . set_tracking_uri ( self . __autologger . tracking_uri ) # 2) switch the experiment currently used by mlflow to the one in the autologger past_active_experiment_id : str = _active_experiment_id () mlflow . set_experiment ( experiment_name = self . __autologger . experiment_name ) # performs the function workload result = func ( * args , ** kwargs ) # 5) switch back to the previosuly activated experiment mlflow . set_experiment ( experiment_id = past_active_experiment_id ) past_active_experiment_id = None # 6) switch back to the previously targeted tracking server mlflow . set_tracking_uri ( past_tracking_uri ) past_tracking_uri = None # 4) switch back to the previously activated run if past_active_run : mlflow . start_run ( run_id = past_active_run . info . run_id ) past_active_run = None else : result = func ( * args , ** kwargs ) return result return isolation_wrapper Run Encapsulates an Mlflow run with auto-logging features. Parameters: autologger ( Autologger ) \u2013 the autologger object name ( Optional[str] , default: None ) \u2013 the experiment name, by default None log_params ( Optional[StringList] , default: None ) \u2013 the params to be logged, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Source code in veil/decorators.py 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 class Run : \"\"\" Encapsulates an Mlflow run with auto-logging features. Parameters ---------- autologger : Autologger the autologger object name : Optional[str], optional the experiment name, by default None log_params : Optional[StringList], optional the params to be logged, by default None log_tags : StringDict, optional the tags to be logged, by default dict() \"\"\" def __init__ ( self , autologger : Autologger , name : Optional [ str ] = None , log_params : Optional [ StringList ] = None , log_tags : StringDict = dict (), ): # members with intended private access self . __autologger : Autologger = check_type ( autologger , Autologger ) self . __name : Optional [ str ] = check_type ( name , Optional [ str ]) self . __log_params : Optional [ StringList ] = check_type ( log_params , Optional [ StringList ]) self . __log_tags : StringDict = check_type ( log_tags , StringDict ) @property def autologger ( self ) -> Autologger : return self . __autologger @property def name ( self ) -> Optional [ str ]: return self . __name @property def log_params ( self ) -> Optional [ StringList ]: return self . __log_params @property def log_tags ( self ) -> StringDict : return self . __log_tags def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) @MlflowIsolated ( autologger = self . __autologger ) def wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session : # resume the parent run mlflow . start_run ( run_id = self . __autologger . _current_session . run_id ) # retrieves the tags from the context tags : StringDict = self . __autologger . _current_session . log_tags . copy () # ...then overrides them with run-bound tags... tags . update ( self . __log_tags ) # ...and eventuallly sets mlflow special tags for .git info repo_uri , sha_commit , branch_name = _get_repo_info () tags . update ({ MLFLOW_GIT_REPO_URL : repo_uri , MLFLOW_GIT_COMMIT : sha_commit , MLFLOW_GIT_BRANCH : branch_name , }) # uses the user provided run name instead of function name, if any _run_name : str = func . __name__ if not self . __name is None : _run_name = self . __name # starts the child run with a context manager (eventually closing it gracefully in case of exceptions) with mlflow . start_run ( run_name = _run_name , nested = True ) as active_run : # then logs tags and... mlflow . set_tags ( tags ) # ...the params with which the funciton has been called for k , v in kwargs . items (): if self . __log_params is not None and len ( self . __log_params ) > 0 : if k in self . log_params : mlflow . log_param ( k , v ) else : mlflow . log_param ( k , v ) # finally the function gets invoked result = func ( * args , ** kwargs ) # stops the parent run mlflow . end_run () else : result = func ( * args , ** kwargs ) return result return wrapper __call__ ( func ) Execute the decorator as well as the wrapped function Source code in veil/decorators.py 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) @MlflowIsolated ( autologger = self . __autologger ) def wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session : # resume the parent run mlflow . start_run ( run_id = self . __autologger . _current_session . run_id ) # retrieves the tags from the context tags : StringDict = self . __autologger . _current_session . log_tags . copy () # ...then overrides them with run-bound tags... tags . update ( self . __log_tags ) # ...and eventuallly sets mlflow special tags for .git info repo_uri , sha_commit , branch_name = _get_repo_info () tags . update ({ MLFLOW_GIT_REPO_URL : repo_uri , MLFLOW_GIT_COMMIT : sha_commit , MLFLOW_GIT_BRANCH : branch_name , }) # uses the user provided run name instead of function name, if any _run_name : str = func . __name__ if not self . __name is None : _run_name = self . __name # starts the child run with a context manager (eventually closing it gracefully in case of exceptions) with mlflow . start_run ( run_name = _run_name , nested = True ) as active_run : # then logs tags and... mlflow . set_tags ( tags ) # ...the params with which the funciton has been called for k , v in kwargs . items (): if self . __log_params is not None and len ( self . __log_params ) > 0 : if k in self . log_params : mlflow . log_param ( k , v ) else : mlflow . log_param ( k , v ) # finally the function gets invoked result = func ( * args , ** kwargs ) # stops the parent run mlflow . end_run () else : result = func ( * args , ** kwargs ) return result return wrapper","title":"API Reference"},{"location":"api/#api-reference","text":"","title":"API Reference"},{"location":"api/#types","text":"","title":"Types"},{"location":"api/#veil.types.StringDict","text":"Type alias for generic lists of strings.","title":"StringDict"},{"location":"api/#decorators","text":"","title":"Decorators"},{"location":"api/#veil.decorators.AutologSession","text":"Wraps an autolog session. Parameters: autologger ( Autologger ) \u2013 the autolog object name ( Optional[str] , default: None ) \u2013 the experiment name, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Source code in veil/decorators.py 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 class AutologSession : \"\"\" Wraps an autolog session. Parameters ---------- autologger : Autologger the autolog object name : Optional[str], optional the experiment name, by default None log_tags : StringDict, optional the tags to be logged, by default dict() \"\"\" def __init__ ( self , autologger : Autologger , name : Optional [ str ] = None , log_tags : StringDict = dict (), ): self . name = name self . log_tags = log_tags # members with intended private access self . __autologger : Autologger = check_type ( autologger , Autologger ) self . __run_id : Optional [ str ] = None self . __past_session : Optional [ AutologSession ] = None @property def autologger ( self ) -> Autologger : return self . __autologger @property def run_id ( self ) -> Optional [ str ]: return self . __run_id @property def name ( self ) -> Optional [ str ]: return self . __name @name . setter def name ( self , value : Optional [ str ]) -> None : self . __name : Optional [ str ] = check_type ( value , Optional [ str ]) @property def log_tags ( self ) -> StringDict : return self . __log_tags @log_tags . setter def log_tags ( self , value : StringDict ) -> None : self . __log_tags : StringDict = check_type ( value , StringDict ) def __enter__ ( self ): # switch the session currently used by the autologger to this one self . __past_session = self . autologger . _current_session self . autologger . _current_session = self @MlflowIsolated ( autologger = self . autologger ) def do_enter (): # starting a session means managing the context so to: if self . autologger . is_autolog_enabled : # immediately starts and stops a novel parent run associated with this context # note that this run will be resumed within run-annotated functions. run : ActiveRun = mlflow . start_run ( run_name = self . name ) mlflow . end_run ( status = RunStatus . to_string ( RunStatus . RUNNING )) self . __run_id = run . info . run_id do_enter () def __exit__ ( self , exc_type , exc_value , exc_tb ): @MlflowIsolated ( autologger = self . autologger ) def do_exit (): # terminating a session means managing the context so to: if self . autologger . is_autolog_enabled : # immediately starts and stops the parent run associated with this context # note that it is terminated with a given status, according to exceptions within the # context manager. termination_status : RunStatus = RunStatus . FINISHED if exc_type : termination_status = RunStatus . FAILED mlflow . start_run ( run_id = self . autologger . _current_session . run_id ) mlflow . end_run ( status = RunStatus . to_string ( termination_status )) self . __run_id = None do_exit () # switch back the session currently used by the autologger to the previous one self . autologger . _current_session = self . __past_session self . __past_session = None","title":"AutologSession"},{"location":"api/#veil.decorators.Autologger","text":"Implements the auto-logging strategy. Source code in veil/decorators.py 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 class Autologger : \"\"\" Implements the auto-logging strategy. \"\"\" def __init__ ( self , is_autolog_enabled : bool = True , tracking_uri : str = mlflow . get_tracking_uri (), experiment_name : str = Experiment . DEFAULT_EXPERIMENT_NAME , ): self . is_autolog_enabled = is_autolog_enabled self . tracking_uri = tracking_uri self . experiment_name = experiment_name # members with intended protected access self . _current_session : Optional [ AutologSession ] = None @property def is_autolog_enabled ( self ) -> bool : return self . __is_autolog_enabled @is_autolog_enabled . setter def is_autolog_enabled ( self , value : bool ) -> None : self . __is_autolog_enabled : bool = check_type ( value , bool ) @property def tracking_uri ( self ) -> str : return self . __tracking_uri @tracking_uri . setter def tracking_uri ( self , value : str ) -> None : self . __tracking_uri : str = check_type ( value , str ) @property def experiment_name ( self ) -> str : return self . __experiment_name @experiment_name . setter def experiment_name ( self , value : str ) -> None : self . __experiment_name : str = check_type ( value , str ) def start_session ( self , name : Optional [ str ] = None , log_tags : StringDict = dict () ): \"\"\"Starts a new session. Parameters ---------- name : Optional[str], optional the experiment name, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- AutologSession teh autolog session. \"\"\" return AutologSession ( autologger = self , name = name , log_tags = log_tags ) def run ( self , name : Optional [ str ] = None , log_params : Optional [ StringList ] = None , log_tags : StringDict = dict () ): \"\"\"Executes a new run. Parameters ---------- name : Optional[str], optional the run name, by default None log_params : Optional[StringList], optional the params to be logged, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- Run the experiment run. \"\"\" return Run ( autologger = self , name = name , log_params = log_params , log_tags = log_tags )","title":"Autologger"},{"location":"api/#veil.decorators.Autologger.run","text":"Executes a new run. Parameters: name ( Optional[str] , default: None ) \u2013 the run name, by default None log_params ( Optional[StringList] , default: None ) \u2013 the params to be logged, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Returns: Run \u2013 the experiment run. Source code in veil/decorators.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 def run ( self , name : Optional [ str ] = None , log_params : Optional [ StringList ] = None , log_tags : StringDict = dict () ): \"\"\"Executes a new run. Parameters ---------- name : Optional[str], optional the run name, by default None log_params : Optional[StringList], optional the params to be logged, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- Run the experiment run. \"\"\" return Run ( autologger = self , name = name , log_params = log_params , log_tags = log_tags )","title":"run"},{"location":"api/#veil.decorators.Autologger.start_session","text":"Starts a new session. Parameters: name ( Optional[str] , default: None ) \u2013 the experiment name, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Returns: AutologSession \u2013 teh autolog session. Source code in veil/decorators.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 def start_session ( self , name : Optional [ str ] = None , log_tags : StringDict = dict () ): \"\"\"Starts a new session. Parameters ---------- name : Optional[str], optional the experiment name, by default None log_tags : StringDict, optional the tags to be logged, by default dict() Returns ------- AutologSession teh autolog session. \"\"\" return AutologSession ( autologger = self , name = name , log_tags = log_tags )","title":"start_session"},{"location":"api/#veil.decorators.MlflowIsolated","text":"Isolates an Mlflow experiment. Source code in veil/decorators.py 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 class MlflowIsolated : \"\"\" Isolates an Mlflow experiment. \"\"\" def __init__ ( self , autologger : Autologger ): # members with intended private access self . __autologger : Autologger = check_type ( autologger , Autologger ) def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) def isolation_wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session is not None : # 3) switch the run current active run (which is paused) within mlflow with a new one past_active_run : ActiveRun = mlflow . active_run () if past_active_run : mlflow . end_run ( RunStatus . to_string ( RunStatus . RUNNING )) # 1) switch the tracking uri currently used by mlflow to the one in the autologger past_tracking_uri : str = mlflow . get_tracking_uri () mlflow . set_tracking_uri ( self . __autologger . tracking_uri ) # 2) switch the experiment currently used by mlflow to the one in the autologger past_active_experiment_id : str = _active_experiment_id () mlflow . set_experiment ( experiment_name = self . __autologger . experiment_name ) # performs the function workload result = func ( * args , ** kwargs ) # 5) switch back to the previosuly activated experiment mlflow . set_experiment ( experiment_id = past_active_experiment_id ) past_active_experiment_id = None # 6) switch back to the previously targeted tracking server mlflow . set_tracking_uri ( past_tracking_uri ) past_tracking_uri = None # 4) switch back to the previously activated run if past_active_run : mlflow . start_run ( run_id = past_active_run . info . run_id ) past_active_run = None else : result = func ( * args , ** kwargs ) return result return isolation_wrapper","title":"MlflowIsolated"},{"location":"api/#veil.decorators.MlflowIsolated.__call__","text":"Execute the decorator as well as the wrapped function Source code in veil/decorators.py 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) def isolation_wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session is not None : # 3) switch the run current active run (which is paused) within mlflow with a new one past_active_run : ActiveRun = mlflow . active_run () if past_active_run : mlflow . end_run ( RunStatus . to_string ( RunStatus . RUNNING )) # 1) switch the tracking uri currently used by mlflow to the one in the autologger past_tracking_uri : str = mlflow . get_tracking_uri () mlflow . set_tracking_uri ( self . __autologger . tracking_uri ) # 2) switch the experiment currently used by mlflow to the one in the autologger past_active_experiment_id : str = _active_experiment_id () mlflow . set_experiment ( experiment_name = self . __autologger . experiment_name ) # performs the function workload result = func ( * args , ** kwargs ) # 5) switch back to the previosuly activated experiment mlflow . set_experiment ( experiment_id = past_active_experiment_id ) past_active_experiment_id = None # 6) switch back to the previously targeted tracking server mlflow . set_tracking_uri ( past_tracking_uri ) past_tracking_uri = None # 4) switch back to the previously activated run if past_active_run : mlflow . start_run ( run_id = past_active_run . info . run_id ) past_active_run = None else : result = func ( * args , ** kwargs ) return result return isolation_wrapper","title":"__call__"},{"location":"api/#veil.decorators.Run","text":"Encapsulates an Mlflow run with auto-logging features. Parameters: autologger ( Autologger ) \u2013 the autologger object name ( Optional[str] , default: None ) \u2013 the experiment name, by default None log_params ( Optional[StringList] , default: None ) \u2013 the params to be logged, by default None log_tags ( StringDict , default: dict() ) \u2013 the tags to be logged, by default dict() Source code in veil/decorators.py 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 class Run : \"\"\" Encapsulates an Mlflow run with auto-logging features. Parameters ---------- autologger : Autologger the autologger object name : Optional[str], optional the experiment name, by default None log_params : Optional[StringList], optional the params to be logged, by default None log_tags : StringDict, optional the tags to be logged, by default dict() \"\"\" def __init__ ( self , autologger : Autologger , name : Optional [ str ] = None , log_params : Optional [ StringList ] = None , log_tags : StringDict = dict (), ): # members with intended private access self . __autologger : Autologger = check_type ( autologger , Autologger ) self . __name : Optional [ str ] = check_type ( name , Optional [ str ]) self . __log_params : Optional [ StringList ] = check_type ( log_params , Optional [ StringList ]) self . __log_tags : StringDict = check_type ( log_tags , StringDict ) @property def autologger ( self ) -> Autologger : return self . __autologger @property def name ( self ) -> Optional [ str ]: return self . __name @property def log_params ( self ) -> Optional [ StringList ]: return self . __log_params @property def log_tags ( self ) -> StringDict : return self . __log_tags def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) @MlflowIsolated ( autologger = self . __autologger ) def wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session : # resume the parent run mlflow . start_run ( run_id = self . __autologger . _current_session . run_id ) # retrieves the tags from the context tags : StringDict = self . __autologger . _current_session . log_tags . copy () # ...then overrides them with run-bound tags... tags . update ( self . __log_tags ) # ...and eventuallly sets mlflow special tags for .git info repo_uri , sha_commit , branch_name = _get_repo_info () tags . update ({ MLFLOW_GIT_REPO_URL : repo_uri , MLFLOW_GIT_COMMIT : sha_commit , MLFLOW_GIT_BRANCH : branch_name , }) # uses the user provided run name instead of function name, if any _run_name : str = func . __name__ if not self . __name is None : _run_name = self . __name # starts the child run with a context manager (eventually closing it gracefully in case of exceptions) with mlflow . start_run ( run_name = _run_name , nested = True ) as active_run : # then logs tags and... mlflow . set_tags ( tags ) # ...the params with which the funciton has been called for k , v in kwargs . items (): if self . __log_params is not None and len ( self . __log_params ) > 0 : if k in self . log_params : mlflow . log_param ( k , v ) else : mlflow . log_param ( k , v ) # finally the function gets invoked result = func ( * args , ** kwargs ) # stops the parent run mlflow . end_run () else : result = func ( * args , ** kwargs ) return result return wrapper","title":"Run"},{"location":"api/#veil.decorators.Run.__call__","text":"Execute the decorator as well as the wrapped function Source code in veil/decorators.py 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 def __call__ ( self , func : Callable ): \"\"\" Execute the decorator as well as the wrapped function \"\"\" check_type ( func , Callable ) @functools . wraps ( func ) @MlflowIsolated ( autologger = self . __autologger ) def wrapper ( * args , ** kwargs ): result : Any = None if self . __autologger . is_autolog_enabled and self . __autologger . _current_session : # resume the parent run mlflow . start_run ( run_id = self . __autologger . _current_session . run_id ) # retrieves the tags from the context tags : StringDict = self . __autologger . _current_session . log_tags . copy () # ...then overrides them with run-bound tags... tags . update ( self . __log_tags ) # ...and eventuallly sets mlflow special tags for .git info repo_uri , sha_commit , branch_name = _get_repo_info () tags . update ({ MLFLOW_GIT_REPO_URL : repo_uri , MLFLOW_GIT_COMMIT : sha_commit , MLFLOW_GIT_BRANCH : branch_name , }) # uses the user provided run name instead of function name, if any _run_name : str = func . __name__ if not self . __name is None : _run_name = self . __name # starts the child run with a context manager (eventually closing it gracefully in case of exceptions) with mlflow . start_run ( run_name = _run_name , nested = True ) as active_run : # then logs tags and... mlflow . set_tags ( tags ) # ...the params with which the funciton has been called for k , v in kwargs . items (): if self . __log_params is not None and len ( self . __log_params ) > 0 : if k in self . log_params : mlflow . log_param ( k , v ) else : mlflow . log_param ( k , v ) # finally the function gets invoked result = func ( * args , ** kwargs ) # stops the parent run mlflow . end_run () else : result = func ( * args , ** kwargs ) return result return wrapper","title":"__call__"},{"location":"usage/","text":"Usage Installation To use Veil, first install it using pip: (.venv) $ pip install veil","title":"Usage"},{"location":"usage/#usage","text":"","title":"Usage"},{"location":"usage/#installation","text":"To use Veil, first install it using pip: (.venv) $ pip install veil","title":"Installation"}]}